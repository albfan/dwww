#!/usr/bin/perl -w
# vim:ts=4
# config for dwww
# "@(#)dwww:$Id: dwww.config,v 1.3 2002/03/17 18:08:16 robert Exp $"

use Debconf::Client::ConfModule qw(:all);

version('2.0');
capb('backup');
title('Dwww Configuration');

my $cfgfile  = '/etc/dwww/dwww.conf';
my $defs_set = 0;
@servers = GetHttpdServersList();
if ($#servers < 0)
{
	set('dwww/servertype', 'none');
	input('high', 'dwww/noserver');
	go();
	stop();
	exit 0;
}


if ( -r "$cfgfile" )
{
	ScanDwwwConfFile ( "$cfgfile" );
	$seen = 0;

	if (defined $dwwwcfg{'servertype'})
	{
		set('dwww/servertype', $dwwwcfg{'servertype'});
		$seen = 1 if &exists_in($dwwwcfg{'servertype'}, @servers);
		fset('dwww/servertype', 'seen', 'true') if $seen;
	}	

	foreach $cfgvar (('docrootdir', 'cgidir', 'cgiuser', 'serverport', 'servername'))
	{
		if (defined	 $dwwwcfg{$cfgvar})
		{
			set("dwww/$cfgvar",  $dwwwcfg{$cfgvar});
			fset("dwww/$cfgvar", 'seen', 'true') if $seen;
		}
	}

	$defs_set = 1;
}

if (not defined $dwwwcfg{'servername'})
{
	$host=`hostname --fqdn`;
	chomp($host);
	set('dwww/servername', "$host") if "$host" =~ /\w/;
}

foreach $cfgvar (('docrootdir', 'cgidir', 'cgiuser', 'serverport', 'servername', 'servertype'))
{
	subst("dwww/$cfgvar", 'dwwwcfg', defined $dwwwcfg{$cfgvar} ? $dwwwcfg{$cfgvar} : 'no configured');
}

subst('dwww/servertype', 'choices', join(', ', @servers));


my $state = 1;
while ($state > 0 && $state < 4)
{

	if ($state == 1)
	{
		beginblock();
		input('medium', 'dwww/servertype');
		endblock();
		@ret = go();
		ScanHttpdConfFile( scalar get('dwww/servertype') );
		if  (! $defs_set)
		{
			foreach $cfgvar (('docrootdir', 'cgidir', 'cgiuser', 'serverport', 'servername', 'servertype'))
			{
				set("dwww/$cfgvar", $httpd{$cfgvar}) if defined $httpd{$cfgvar};
			}

			$defs_set = 1;
		}

		foreach $cfgvar (('docrootdir', 'cgidir', 'cgiuser', 'serverport', 'servername'))
		{
			subst("dwww/$cfgvar", 'httpd',
				defined $httpd{$cfgvar} ? $httpd{$cfgvar} : 'unknown') ;
		}
	}

	elsif ($state == 2)
	{
		beginblock();
		 input('medium', 'dwww/docrootdir');
		 input('medium', 'dwww/cgidir');
		 input('medium', 'dwww/cgiuser');
		endblock();
		@ret = go();

		# error handling
		$dir = scalar get('dwww/docrootdir');
		while ( ($ret[0] == 0) and
				not (($dir =~ m|^/|) and (-d $dir))
			  )
		{
			subst('dwww/nosuchdir', 'dir', $dir);
			fset('dwww/nosuchdir', 'seen', 'false');
			fset('dwww/docrootdir', 'seen', 'false');
			set('dwww/docrootdir', '/var/www');

			beginblock();
			 input('high', 'dwww/nosuchdir');
			 input('high', 'dwww/docrootdir');
			endblock();
			@ret = go();

			$dir = scalar get('dwww/docrootdir');
		}

		set('dwww/docrootdir', canondir($dir));


		$dir = scalar get('dwww/cgidir');
		while ( ($ret[0] == 0) and
				not (($dir =~ m|^/|) and (-d $dir))
			  )
		{
			subst('dwww/nosuchdir', 'dir', $dir);
			fset('dwww/nosuchdir', 'seen', 'false');
			fset('dwww/cgidir', 'seen', 'false');
			set('dwww/cgidir', '/usr/lib/cgi-bin');

			beginblock();
			 input('high', 'dwww/nosuchdir');
			 input('high', 'dwww/cgidir');
			endblock();
			@ret = go();

			$dir = scalar get('dwww/cgidir');
		}

		set('dwww/cgidir', canondir($dir));


		$usr = scalar get('dwww/cgiuser');
		while ( ($ret[0] == 0) and
				not (($usr =~  m/^\s*\d+\s*$/) or (defined getpwnam($usr)))
			   )
		{
			subst('dwww/nosuchuser', 'user', $usr);
			fset('dwww/nosuchuser', 'seen', 'false');
			fset('dwww/cgiuser', 'seen', 'false');
			set('dwww/cgiuser', 'www-data');

			beginblock();
			 input('high', 'dwww/nosuchuser');
			 input('high', 'dwww/cgiuser');
			endblock();
			@ret = go();

			$usr = scalar get('dwww/cgiuser');
		}

	}

	elsif ($state == 3)
	{
		beginblock();
		 input('medium', 'dwww/servername');
		 input('medium', 'dwww/serverport');
		endblock();
		@ret = go();

		$port = scalar get('dwww/serverport');
		while ( ($ret[0] == 0) and ($port !~ /^\s*\d+\s*$/))
		{
			subst('dwww/badport', 'port', $port);
			fset('dwww/badport', 'seen', 'false');
			fset('dwww/serverport', 'seen', 'false');
			set('dwww/serverport', '80');

			beginblock();
			 input('high', 'dwww/badport');
			 input('high', 'dwww/serverport');
			endblock();
			@ret = go();

			$port = scalar get('dwww/serverport');
		}
		$port =~ s/\s+//g;
		set('dwww/serverport', $port);
	}

	if ( ($ret[0] == 30) )
		{ $state--; }	# go back
	else
		{ $state++; }	# go next
}



# SUBROUTINES

# Returns list of installed www servers
sub GetHttpdServersList
{
	my @servers=();

	# Scan for Apache
	if ( -x "/usr/sbin/apache" || -x "/usr/sbin/apache-httpd" )
	{
		push @servers, "Apache";
	}

	# Scan for Apache SSL
	if ( -x "/usr/sbin/apache-ssl" )
	{
		push @servers, "Apache SSL";
	}

	# Scan for CERN-httpd
	if ( -x "/usr/sbin/cern-httpd" )
	{
		push @servers, "CERN httpd";
	}

	# Scan for boa
	if ( -x "/usr/sbin/boa" )
	{
		push @servers, "Boa";
	}

	# Scan for NCSA
	if ( -x "/usr/sbin/ncsa" )
	{
		push @servers, "NCSA httpd";
	}

	# Scan for wn
	if ( ( -x "/usr/sbin/wnd" ) or ( -x "/usr/sbin/wnsd" ) )
	{
		push @servers, "wn";
	}

	# Scan for roxen
	if ( -x "/usr/lib/roxen/bin/pike" )
	{
		push @servers, "roxen";
	}

	# Scan for roxen2
	if ( -x "/usr/lib/roxen2/bin/pike" )
	{
		push @servers, "roxen2";
	}

	# Scan for thttpd
	if ( -x "/usr/sbin/thttpd" )
	{
		push @servers, "thttpd";
	}

	# Scan for dhttpd
	if ( -x "/usr/bin/dhttpd" )
	{
		# dhtpd does not support cgi ;
	}

	return @servers;
}


sub ScanHttpdConfFile
{
	my $server = lc "$_[0]";


	if ($server eq "apache")
	{
    		ScanApacheConfFile("/etc/apache/httpd.conf");
	    	ScanApacheConfFile("/etc/apache/srm.conf");
	}

	if ($server eq "apache ssl")
	{
    		ScanApacheConfFile("/etc/apache-ssl/httpd.conf");
	    	ScanApacheConfFile("/etc/apache-ssl/srm.conf");
	}

	elsif ($server eq "boa")
	{
		ScanApacheConfFile("/etc/boa/boa.conf");
	}

	elsif ($server eq "ncsa httpd")
	{
		ScanApacheConfFile("/etc/ncsa/httpd.conf");
		ScanApacheConfFile("/etc/ncsa/srm.conf");
	}

	elsif ($server eq "cern httpd")
	{
		ScanCERNConfFile("/etc/cern-httpd.conf");
	}

	elsif ($server eq "thttpd")
	{
		ScanTHttpdConfFile("/etc/thttpd/thttpd.conf");
	}

	elsif (($server eq "wn") or ($server =~ /^roxen2?$/))
	{
		$httpd{'docrootdir'}	= '/var/www';
		$httpd{'cgidir'}	= '/usr/lib/cgi-bin' ;
		$httpd{'cgiuser'}	= 'www-data';
		$httpd{'serverport'} 	= 80;
	}
}




# Subroutine to Scan Apache Configuration Files
# Also works for boa and NCSA (which are similar)
sub ScanApacheConfFile ($)
{
	# Configfile to parse is the argument to the subroutine

	if ( ! -r "$_[0]" ) { return; };
	open(HTCONFFILE,"<$_[0]") || die "Could not open $_[0]";

	# First, do not consider any entries between
	# VirtualHost directives
	$virtualhost=0;
	while (<HTCONFFILE>)
	{
		if (/^\s*<\s*VirtualHost.*>/i)
		{
			$virtualhost=1;
		}

		elsif (/^\s*<\s*\/VirtualHost.*>/i)
		{
			$virtualhost=0;
		}

		elsif ($virtualhost==0)
		{
			# OK, consider directives

			# Check for DocumentRoot (for symlink to /var/lib/dwww/html)
			if( s/^\s*DocumentRoot\s+//i)
			{
				s/^\s*(.*)\/\s*$/$1\n/;
				chomp($httpd{'docrootdir'}=$_);
			}

			# Check for ScriptAlias (to copy dwww.cgi to)
			if( s/^\s*ScriptAlias\s+\/cgi-bin\/\s+//i)
			{
				s/^\s*(.*)\/\s*$/$1\n/;
				chomp($httpd{'cgidir'}=$_);
			}

			# Check for User (for ownership of /var/cache/dwww)
			if( s/^\s*User\s+//i)
			{
				chomp($httpd{'cgiuser'}=$_);
			}

			# Check for ServerName (for DWWW_SERVERNAME)
			if( s/^\s*ServerName\s+//i)
			{
				chomp($httpd{'servername'}=$_);
			}

			# Check for Port (for DWWW_SERVERNAME)
			if( s/^\s*Port\s+//i)
			{
				chomp($httpd{'serverport'}=$_);
			}
		}
	}
	close HTCONFFILE;
}



# Subroutine to Scan CERN-httpd Configuration Files
sub ScanCERNConfFile ($)
{
	# Configfile to parse is the argument to the subroutine

	if ( ! -r "$_[0]" ) { return };
	open(HTCONFFILE,"<$_[0]") || die "Could not open $_[0]";

	while (<HTCONFFILE>)
	{
		# OK, consider directives

		# Check for default location of documents
		# (for symlink to /var/lib/dwww/html)
		if( s/^\s*Pass\s+\/\*\s+//i)
		{
			s/^\s*(.*)\*\s*$/$1\n/;
			s/^\s*(.*)\/\s*$/$1\n/;
			chomp($httpd{'docrootdir'}=$_);
		}

		# Check for Exec (to copy dwww.cgi to)
		if( s/^\s*Exec\s+\/cgi-bin\/\*\s+//i)
		{
			s/^\s*(.*)\*\s*$/$1\n/;
			s/^\s*(.*)\/\s*$/$1\n/;
			chomp($httpd{'cgidir'}=$_);
		}

		# Check for User (for ownership of /var/cache/dwww)
		if( s/^\s*UserId\s+//i)
		{
			chomp($httpd{'cgiuser'}=$_);
		}

		# Check for ServerName (for DWWW_SERVERNAME)
		if( s/^\s*HostName\s+//i)
		{
			chomp($httpd{'servername'}=$_);
		}

		# Check for Port (for DWWW_SERVERPORT)
		if( s/^\s*Port\s+//i)
		{
			chomp($httpd{'serverport'}=$_);
		}

	}
	close HTCONFFILE;
}

# Subroutine to Scan thttpd Configuration Files
sub ScanTHttpdConfFile ($)
{
	# Configfile to parse is the argument to the subroutine

	if ( ! -r "$_[0]" ) { return };
	open(HTCONFFILE,"<$_[0]") || die "Could not open $_[0]";

	while (<HTCONFFILE>)
	{
		if( s/^\s*dir=//i)
		{
			chomp($httpd{'docrootdir'}=$_);
		}

		# Check for User (for ownership of /var/cache/dwww)
		if( s/^\s*user=//i)
		{
			chomp($httpd{'cgiuser'}=$_);
		}

		# Check for host (for DWWW_SERVERNAME)
		if( s/^\s*host=//i)
		{
			chomp($httpd{'servername'}=$_);
		}

		# Check for port (for DWWW_SERVERPORT)
		if( s/^\s*port=//i)
		{
			chomp($httpd{'serverport'}=$_);
		}

	}
	close HTCONFFILE;
}

## SHARED
# Subroutine to Scan Dwww configuration file
# Configfile to parse is the argument to the subroutine
sub ScanDwwwConfFile
{

	if ( ! -r "$_[0]" ) { return; };
	open(DWWWCONFFILE,"<$_[0]") || die "Could not open $_[0]";
	
	# set defaults
	$dwwwcfg{'serverport'}  = 80;

	while (<DWWWCONFFILE>)
	{
		# Check for DWWW_DOCROOTDIR
		if( s/^\s*DWWW_DOCROOTDIR=//)
		{
			chomp($dwwwcfg{'docrootdir'}=$_) if /\w/;
		}

		# Check for DWWW_CGIDIR
		elsif( s/^\s*DWWW_CGIDIR=//)
		{
			chomp($dwwwcfg{'cgidir'}=$_) if /\w/;
		}

		# Check for DWWW_CGIUSER
		elsif( s/^\s*DWWW_CGIUSER=//)
		{
			chomp($dwwwcfg{'cgiuser'}=$_) if /\w/;
		}

		# Check for DWWW_SERVERNAME
		elsif( s/^\s*DWWW_SERVERNAME=//)
		{
			if (/\w/)
			{
				chomp($dwwwcfg{'servername'}=$_);
				# some compatibility code: assume that everything after i
				# the last : is  a port number
	
				if ($dwwwcfg{'servername'} =~ /^(.*):(\d+)$/)
				{
					$dwwwcfg{'servername'} = $1;
					$dwwwcfg{'serverport'} = $2;
				}
			}
		}


		# Check for DWWW_SERVERPORT
		elsif( s/^\s*DWWW_SERVERPORT=//)
		{
			chomp($dwwwcfg{'serverport'}=$_) if /\w/;
		}

		# Check for DWWW_SERVERTYPE
		elsif( s/^\s*DWWW_SERVERTYPE=//)
		{
			s/\"//g; # Kill quotes
			s/\'//g; # Kill quotes
			chomp($dwwwcfg{'servertype'}=$_) if /\w/; 
		}
	}
	close DWWWCONFFILE;
}


sub canondir
{
	my $dir = $_[0];

	$dir =~ s|/+|/|g;
	$dir =~ s|/$||;
	return $dir;
}

# Check if $a exists in @_
sub exists_in
{
	my $a = lc (shift);
	
	foreach $b (@_)
	{
		return 1 if ($a cmp (lc $b)) == 0;
	}
	return 0;
}

